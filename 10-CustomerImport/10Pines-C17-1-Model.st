Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !TestCase subclass: #CustomerImporterTest	instanceVariableNames: 'session inputStream customers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!CustomerImporterTest methodsFor: 'as yet unclassified' stamp: 'MartinMongiBadia 11/7/2017 04:22'!customerMatchesJuanPerez: customer 	self assert: customer size equals: 1.	self assert: customer anyOne firstName equals: 'Juan'.	self assert: customer anyOne lastName equals: 'Perez'.	self assert: customer anyOne identificationNumber equals: '23-25666777-9'.	self assert: customer anyOne identificationType equals: 'C'.! !!CustomerImporterTest methodsFor: 'importing' stamp: 'MartinMongiBadia 11/7/2017 04:25'!readTestData	inputStream := ReadStream		on:			'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImporterTest methodsFor: 'importing' stamp: 'MartinMongiBadia 11/7/2017 04:25'!setUp	self readTestData.	session := DataBaseSession		for:			(Array				with:					(ClassMapping						withDefaultTableNameFor: Address						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #streetName)								with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)								with: (EmbededMapping withDefaultFieldNameFor: #town)								with: (EmbededMapping withDefaultFieldNameFor: #zipCode)								with: (EmbededMapping withDefaultFieldNameFor: #province)))				with:					(ClassMapping						withDefaultTableNameFor: Customer						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #firstName)								with: (EmbededMapping withDefaultFieldNameFor: #lastName)								with: (EmbededMapping withDefaultFieldNameFor: #identificationType)								with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)								with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address)))).	session open.	session beginTransaction! !!CustomerImporterTest methodsFor: 'importing' stamp: 'MartinMongiBadia 11/7/2017 03:39'!tearDown	session commit.	session close.	inputStream close! !!CustomerImporterTest methodsFor: 'importing' stamp: 'MartinMongiBadia 11/7/2017 04:05'!importCustomers	"	self importCustomers	"	| newCustomer line |	line := inputStream nextLine.	[ line notNil ]		whileTrue: [ (line beginsWith: 'C')				ifTrue: [ | customerData |					customerData := line substrings: {$,}.					newCustomer := Customer new.					newCustomer firstName: customerData second.					newCustomer lastName: customerData third.					newCustomer identificationType: customerData fourth.					newCustomer identificationNumber: customerData fifth.					session persist: newCustomer ].			(line beginsWith: 'A')				ifTrue: [ | addressData newAddress |					addressData := line substrings: {$,}.					newAddress := Address new.					newAddress streetName: addressData second.					newAddress streetNumber: addressData third asInteger.					newAddress town: addressData fourth.					newAddress zipCode: addressData fifth asInteger.					newAddress province: addressData fourth.					newCustomer addAddress: newAddress ].			line := inputStream nextLine ].! !!CustomerImporterTest methodsFor: 'tests' stamp: 'MartinMongiBadia 11/7/2017 04:20'!test01ImportCustomers	| customer |	self importCustomers.	customers := session selectAllOfType: Customer.	self assert: customers size equals: 2.	customer := self getCustomerwithIdNumber: '22333444' andIdType: 'D'.	self customerMatchesPepeSanchez: customer.	customer := self getCustomerwithIdNumber: '23-25666777-9' andIdType: 'C'.	self customerMatchesJuanPerez: customer.! !!CustomerImporterTest methodsFor: 'tests' stamp: 'MartinMongiBadia 11/7/2017 04:11'!customerMatchesPepeSanchez: customer	self assert: customer size equals: 1.	self assert: customer anyOne firstName equals: 'Pepe'.	self assert: customer anyOne lastName equals: 'Sanchez'.	self assert: customer anyOne identificationNumber equals: '22333444'.	self assert: customer anyOne identificationType equals: 'D'.! !!CustomerImporterTest methodsFor: 'tests' stamp: 'MartinMongiBadia 11/7/2017 04:18'!getCustomerwithIdNumber: idNumber andIdType: idType	| customer |	customer := customers		select: [ :aCustomer | 			aCustomer identificationNumber = idNumber				and: [ aCustomer identificationType = idType ] ].	^ customer! !